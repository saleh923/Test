package com.mygdx.game.Screen;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.Preferences;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.maps.MapObject;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TmxMapLoader;
import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.physics.box2d.Box2DDebugRenderer;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.utils.viewport.StretchViewport;
import com.badlogic.gdx.utils.viewport.Viewport;
import com.mygdx.game.Fruits;
import com.mygdx.game.Scene.Hud;
import com.mygdx.game.Tools.MenuCreator;
import com.mygdx.game.Tools.MenuIcons;

import java.util.ArrayList;

/**
 * Created by user on 10/06/2016.
 */
public class Worlds implements Screen {

    private Fruits game;
    private TextureAtlas atlas;
    private OrthographicCamera gamecam;
    private Viewport gameport;
    private Vector3 touchpos;
    private Stage stage;
    private Hud hud;
    private Preferences prefs;
    private TmxMapLoader mapLoader;
    private TiledMap map;
    private MapObject object;
    private OrthogonalTiledMapRenderer renderer;
    private World world;
    private Box2DDebugRenderer b2dr;
    private MenuIcons Icons;
    private static float temp;
    private static float level;
    private float topLevel;
    public Worlds(Fruits game, float level)
    {
        this.game=game;
        this.level=level;
        gamecam=new OrthographicCamera();
        gameport=new StretchViewport(820/Fruits.PPM,580/Fruits.PPM,gamecam);
        stage=new Stage(gameport,((Fruits) game).batch);
        hud=new Hud(game.batch,level);
        //atlas=new TextureAtlas("BoyAndApple.pack");
        mapLoader=new TmxMapLoader();
        map=mapLoader.load("Menu1.tmx");
        renderer=new OrthogonalTiledMapRenderer(map,1/Fruits.PPM);
        gamecam.position.set(gameport.getWorldWidth()/2f,gameport.getWorldHeight()/2f,0);
        temp=0;
        world=new World(new Vector2(0,-10),true);
        b2dr=new Box2DDebugRenderer();
        prefs = Gdx.app.getPreferences("levels");
        String name=prefs.getString("level", " ");
        if(name==" ")
            topLevel=1;
        else
            topLevel=Float.valueOf(name);
        Icons=new MenuIcons(game.batch,level);
    }
    public World getWorld()
    {
        return world;
    }
    public TiledMap getMap()//12 this is for Goomba
    {
        return map;
    }

    @Override
    public void show() {

    }
    public void handleinput(float dt)
    {
        if (Icons.isLevellock1())
        {
            level=1;
            game.setScreen(new PlayScreen(game,level));
        }
        if (Icons.isLevellock2()&&topLevel>1)
        {
            level=2;
            game.setScreen(new PlayScreen(game,2));
        }
        if (Icons.isLevellock3()&&topLevel>2)
        {
            level=3;
            game.setScreen(new PlayScreen(game,3));
        }
        if (Icons.isLevellock4()&&topLevel>3)
        {
            level=4;
            game.setScreen(new PlayScreen(game,4));
        }
        if (Icons.isLevellock5()&&topLevel>4)
        {
            level=5;
            game.setScreen(new PlayScreen(game,5));
        }
        if (Icons.isLevellock6()&&topLevel>5)
        {
            level=6;
            game.setScreen(new PlayScreen(game,6));
        }
        if (Icons.isLevellock7()&&topLevel>6)
        {
            level=7;
            game.setScreen(new PlayScreen(game,level));
        }
        if (Icons.isLevellock8()&&topLevel>7)
        {
            level=8;
            game.setScreen(new PlayScreen(game,level));
        }
        if (Icons.isLevellock9()&&topLevel>8)
        {
            level=9;
            game.setScreen(new PlayScreen(game,level));
        }
        
        Fruits.manager.get("music/start.mp3", Music.class).stop();
        //Fruits.manager.get("music/Backmusic.ogg", Music.class).play();

        if((Gdx.input.isKeyJustPressed(Input.Keys.BACK)))
            game.setScreen(new GlobalWorld(game,level));
    }
    public void update(float dt)
    {
        handleinput(dt);
        world.step(1 /60f, 6, 2);
        //player.update(dt);
        gamecam.update();
        renderer.setView(gamecam);


    }

    @Override
    public void render(float delta) {
        float level;
        update(delta);
        Gdx.gl.glClearColor(1,2,2,1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        renderer.render();
        b2dr.render(world, gamecam.combined);
        game.batch.setProjectionMatrix(gamecam.combined);
        game.batch.begin();
        // player.draw(game.batch);
        game.batch.end();
        game.batch.setProjectionMatrix(hud.stage.getCamera().combined);
        // hud.stage.draw();
        Icons.draw();
    }

    @Override
    public void resize(int width, int height) {
        gameport.update(width, height);
        Icons.resize(width,height);

    }

    @Override
    public void pause() {

    }

    @Override
    public void resume() {

    }


    @Override
    public void hide() {

    }

    @Override
    public void dispose() {

    }
}
